---

- name: get home directory of Ansible runner
  shell: "echo $HOME"
  register: ansible_runner_home

- name: create SSH keypair for multi node sync
  when: start_multinode
  community.crypto.openssh_keypair:
    path: "{{ ansible_runner_home.stdout }}/.ssh/id_rsa"
    type: rsa
    comment: "Ansible temp SSH key to synchronize nodes"
  delegate_to: "{{ genesis_node }}"

- name: store SSH pubkey in variable
  when: start_multinode
  shell: "cat {{ ansible_runner_home.stdout }}/.ssh/id_rsa.pub"
  register: ssh_pub_key
  delegate_to: "{{ genesis_node }}"

- name: add generated SSH key to multi nodes
  when: start_multinode
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ ssh_pub_key.stdout }}"

- name: reset gaiad database (command for <v7.0.1)
  when: chain_binary_name == "gaiad" and node_unsafe_reset and ((major_version|int == 7 and patch_version|int == 0) or major_version|int < 7)
  shell: |
    cd $HOME
    {{chain_bin}} unsafe-reset-all --home {{chain_home}}
  become_user: "{{node_user}}"
  tags:
    - chain_reset

- name: reset gaiad database (command for >v7.0.0)
  when: chain_binary_name == "gaiad" and node_unsafe_reset and ((major_version|int == 7 and patch_version|int >= 1) or major_version|int > 7)
  shell: |
    cd $HOME
    {{chain_bin}} tendermint unsafe-reset-all --home {{chain_home}}
  become_user: "{{node_user}}"
  tags:
    - chain_reset

# Config file generation
- name: copy app.toml
  when: app_toml_file is defined
  copy:
    src: '{{app_toml_file}}'
    dest: '{{chain_home}}/config/app.toml'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: copy app.toml to multi-node home
  when: start_multinode and app_toml_file is defined
  copy:
    src: '{{ app_toml_file }}'
    dest: '{{ node_user_home }}/multinode/{{ inventory_hostname }}/config/app.toml'
    owner: '{{ node_user }}'
    group: '{{ node_user }}'
  delegate_to: "{{ genesis_node }}"

- name: copy config.toml
  when: config_toml_file is defined
  copy:
    src: '{{config_toml_file}}'
    dest: '{{chain_home}}/config/config.toml'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: copy config.toml to muti-node home
  when: start_multinode and config_toml_file is defined
  copy:
    src: '{{ config_toml_file }}'
    dest: '{{ node_user_home }}/multinode/{{ inventory_hostname }}/config/config.toml'
    owner: '{{ node_user }}'
    group: '{{ node_user }}'
  delegate_to: "{{ genesis_node }}"

- name: copy node_key.json
  when: node_key_file is defined
  copy:
    src: '{{node_key_file}}'
    dest: '{{chain_home}}/config/node_key.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: copy node_key.json to muti-node home
  when: start_multinode and node_key_file is defined
  copy:
    src: '{{ node_key_file }}'
    dest: '{{ node_user_home }}/multinode/{{ inventory_hostname }}/config/node_key.json'
    owner: '{{ node_user }}'
    group: '{{ node_user }}'
  delegate_to: "{{ genesis_node }}"

- name: copy priv_validator_key.json
  when: priv_validator_key_file is defined
  copy:
    src: '{{priv_validator_key_file}}'
    dest: '{{chain_home}}/config/priv_validator_key.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: copy priv_validator_key.json to muti-node home
  when: start_multinode and priv_validator_key_file is defined
  copy:
    src: '{{ priv_validator_key_file }}'
    dest: '{{ node_user_home }}/multinode/{{ inventory_hostname }}/config/priv_validator_key.json'
    owner: '{{ node_user }}'
    group: '{{ node_user }}'
  delegate_to: "{{ genesis_node }}"

# Create validator
- name: create validator
  when: chain_create_validator
  shell: |
    cd $HOME
    {{chain_bin}} keys add validator --keyring-backend {{node_keyring}} --home {{chain_home}} --output json
    {{chain_bin}} add-genesis-account validator {{chain_validator_coins}}{{ chain_denom }} --home {{chain_home}} --keyring-backend="{{node_keyring}}"
  register: chain_create_validator_output
  become_user: "{{node_user}}"

- name: save validator name, address, and mnemonic
  when: chain_create_validator
  copy:
    content="{{chain_create_validator_output.stderr}}"
    dest="{{chain_home}}/validator.json"
  become_user: "{{node_user}}"

- name: create genesis accounts
  when: chain_airdrop and chain_create_validator
  shell: |
    cd $HOME
    {{chain_bin}} add-genesis-account {{ item }} {{chain_airdrop_coins}}{{ chain_denom }} --home {{chain_home}}
  become_user: "{{node_user}}"
  loop: "{{ chain_airdrop_accounts }}"

- name: gentx validator
  when: chain_create_validator
  shell: |
    cd $HOME
    {{chain_bin}} gentx validator {{chain_gentx_validator}}{{ chain_denom }} --keyring-backend="{{node_keyring}}" --home {{chain_home}} --moniker {{ validator_moniker }} --chain-id {{chain_id}}
  become_user: "{{node_user}}"

- name: create multi-node self-delegation accounts save the mnemonics shown in the output
  when: start_multinode
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} keys add {{ inventory_hostname }} --keyring-backend {{ node_keyring }} --home {{chain_home}} --output json
    {{chain_bin}} add-genesis-account {{ inventory_hostname }} {{ chain_validator_coins }}{{ chain_denom }} --home {{chain_home}} --keyring-backend="{{ node_keyring }}"
  register: node_create_multinode_validator_output
  become_user: "{{ node_user }}"
  delegate_to: "{{ genesis_node }}"
  throttle: 1

- name: save multi-node validator name, address, and mnemonic
  when: start_multinode
  copy:
    content="{{node_create_multinode_validator_output.stderr}}"
    dest="{{ node_user_home }}/multinode/{{ inventory_hostname }}/validator.json"
  delegate_to: "{{ genesis_node }}"
  become_user: "{{ node_user }}"

- name: store multi node IDs
  when: start_multinode
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} tendermint show-node-id --home {{ node_user_home }}/multinode/{{ inventory_hostname }}
  register: node_multinode_id
  become_user: "{{ node_user }}"
  delegate_to: "{{ genesis_node }}"

- name: store multi node pubkeys
  when: start_multinode
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} tendermint show-validator --home {{ node_user_home }}/multinode/{{ inventory_hostname }} | jq -r '.key'
  register: node_multinode_pubkey
  become_user: "{{ node_user }}"
  delegate_to: "{{ genesis_node }}"

- name: print muti node IDs and pubkeys
  when: start_multinode
  debug:
    msg: 'Node ID for {{ inventory_hostname }} is {{ node_multinode_id.stdout }} and public key is {{ node_multinode_pubkey.stdout }}'
  become_user: "{{node_user}}"

- name: create multi-node validators
  when: start_multinode
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} gentx {{ inventory_hostname }} {{ chain_gentx_validator }}{{ chain_denom }} --pubkey $({{chain_bin}} tendermint show-validator --home {{ node_user_home }}/multinode/{{ inventory_hostname }}) --keyring-backend="{{ node_keyring }}" --home {{ chain_home }} --chain-id {{ chain_id }} --node-id {{ node_multinode_id.stdout }} --moniker {{ validator_moniker }} --output-document {{ chain_home }}/config/gentx/{{ inventory_hostname }}.json
  become_user: "{{ node_user }}"
  delegate_to: "{{ genesis_node }}"
  throttle: 1

- name: collect gentx
  when: chain_create_validator
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} collect-gentxs --home {{ chain_home }}
  become_user: "{{ node_user }}"

- name: patch genesis file with minimum deposit and short voting period
  when: chain_gov_testing
  shell: |
    cd {{chain_home}}/config
    jq '.app_state.gov.deposit_params.min_deposit[0].amount |= "1"' genesis.json > temp.json
    jq '.app_state.gov.voting_params.voting_period |= "{{ chain_voting_period }}"' temp.json > genesis.json
    rm temp.json

- name: patch genesis file with specified denom
  replace:
    path: '{{chain_home}}/config/genesis.json'
    regexp: 'stake'
    replace: '{{chain_denom}}'

# Transfer genesis and required files to multi-node machines
- name: Transfer multi-node config/genesis.json
  when: start_multinode
  synchronize:
    mode: push
    src: "{{ chain_home }}/config/genesis.json"
    dest: "{{ chain_home }}/config/genesis.json"
    delete: yes
    rsync_opts:
      - "--chown={{ node_user }}:{{ node_user }}"
  delegate_to: "{{ genesis_node }}"

- name: Transfer multi-node config/node_key.json
  when: start_multinode
  synchronize:
    mode: push
    src: "{{ node_user_home }}/multinode/{{ inventory_hostname }}/config/node_key.json"
    dest: "{{ chain_home }}/config/node_key.json"
    delete: yes
    rsync_opts:
      - "--chown={{ node_user }}:{{ node_user }}"
  delegate_to: "{{ genesis_node }}"

- name: Transfer multi-node config/priv_validator_key.json
  when: start_multinode
  synchronize:
    mode: push
    src: "{{ node_user_home }}/multinode/{{ inventory_hostname }}/config/priv_validator_key.json"
    dest: "{{ chain_home }}/config/priv_validator_key.json"
    delete: yes
    rsync_opts:
      - "--chown={{ node_user }}:{{ node_user }}"
  delegate_to: "{{ genesis_node }}"

# Get trust height automatically
- name: obtain trust height
  when: statesync_enabled and statesync_auto_populate
  script:
    get_trust_height.sh {{ statesync_rpc_servers.split(',')[0] }}
  register: trust_height

- name: obtain trust height block hash ID
  when: statesync_enabled and statesync_auto_populate
  script:
    get_trust_hash.sh {{ statesync_rpc_servers.split(',')[0] }} {{ trust_height.stdout }}
  register: trust_hash

- name: print trust height and hash ID
  when: statesync_enabled and statesync_auto_populate
  debug:
    msg: 'Height {{trust_height.stdout }} has hash ID {{ trust_hash.stdout }}'
  become_user: "{{node_user}}"

- name: set state sync variables
  when: statesync_enabled and statesync_auto_populate
  set_fact:
    statesync_trust_height: "{{ trust_height.stdout }}"
    statesync_trust_hash: "{{ trust_hash.stdout }}"

## Addressbook config
- name: copy addrbook.json
  when: addrbook_file is defined
  copy:
    src: '{{addrbook_file}}'
    dest: '{{chain_home}}/config/addrbook_file.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: download addrbook.json from URL
  when: addrbook_url is defined
  get_url:
    url: "{{addrbook_url}}"
    dest: "{{chain_home}}/config/addrbook.json"
    owner: '{{node_user}}'
    group: '{{node_user}}'

## Dynamic P2P persistent peers
- name: collect node IDs
  when: dynamic_p2p_persistent_peers
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} tendermint show-node-id --home {{ chain_home }}
  register: dynamic_p2p_id
  become_user: "{{ node_user }}"

- name: Get P2P port variable for hosts
  when: dynamic_p2p_persistent_peers
  set_fact:
    dynamic_p2p_port: "{{ p2p_port }}"

- name: collected Node IDs and P2P ports
  when: dynamic_p2p_persistent_peers
  debug:
    msg: 'Node ID for {{ inventory_hostname }} is {{ dynamic_p2p_id.stdout }} P2P port set to: {{ dynamic_p2p_port }}'
  become_user: "{{ node_user }}"

- name: clear p2p_persistent_peers
  when: dynamic_p2p_persistent_peers
  set_fact:
    p2p_persistent_peers: ""

- name: set dynamic p2p_persistent_peers
  when: dynamic_p2p_persistent_peers
  set_fact:
    p2p_persistent_peers: "{{ p2p_persistent_peers }}{{ hostvars[item]['dynamic_p2p_id']['stdout'] }}@{{ item }}:{{ hostvars[item]['dynamic_p2p_port'] }},"
  with_items: "{{ groups['node'] }}"

- name: remove ending , from p2p_persistent_peers
  when: dynamic_p2p_persistent_peers
  set_fact:
    p2p_persistent_peers: "{{ p2p_persistent_peers[:-1] }}"

- name: p2p_persistent_peers string
  when: dynamic_p2p_persistent_peers
  debug:
    msg: 'p2p_persistent_peers string: {{ p2p_persistent_peers }}'
  become_user: "{{ p2p_persistent_peers }}"

## Patching Config files
- name: generate config json for patching toml files
  template:
    src: ansible_vars.json.j2
    dest: '{{chain_home}}/config/ansible_vars.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: patch .toml configs with ansible variables
  script: |
    copy_config_vars.py --chain_home=$(echo {{chain_home}}) \
      --config_file=$(echo {{chain_home}}/config/ansible_vars.json)
  become_user: "{{node_user}}"

- name: delete generated config json
  file:
    state: absent
    path: '{{chain_home}}/config/ansible_vars.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

## Remove SSH key
- name: Remove generated SSH key from multi nodes
  when: start_multinode
  authorized_key:
    user: "{{ ansible_user }}"
    state: absent
    key: "{{ ssh_pub_key.stdout }}"
